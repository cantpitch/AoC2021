(require 'str)

(defun aoc05-load-input ()
  (uiop:read-file-lines #p"~/Projects/AoC2021/input/input05.txt"))

(defparameter *grid* 1000)

(defun aoc05-parse-input (input)
  (let ((vents nil))
    (dolist (line input)
      (let* ((endpoints (str:split " -> " line))
	     (start (str:split "," (car endpoints)))
	     (end (str:split "," (cadr endpoints)))
	     (vent (list
		    (list (parse-integer (car start))
			  (parse-integer (cadr start)))
		    (list (parse-integer (car end))
			  (parse-integer (cadr end))))))
	(push vent vents)))
    vents))

(defmacro start-x (pair) `(caar ,pair))
(defmacro end-x (pair) `(caadr ,pair))
(defmacro start-y (pair) `(cadar ,pair))
(defmacro end-y (pair) `(cadadr ,pair))

(defun aoc0501-mark-vents (vents marked)
  (dolist (vent vents)
    (when (equal (start-x vent) (end-x vent))
      (loop for y from (min (start-y vent) (end-y vent))
	      to (max (start-y vent) (end-y vent))
	    do (incf (aref marked y (start-x vent)))))
    (when (equal (start-y vent) (end-y vent))
      (loop for x from (min (start-x vent) (end-x vent))
	      to (max (start-x vent) (end-x vent))
	    do (incf (aref marked (start-y vent) x))))))

(defun aoc05-swap-points (vent)
  (list (cadr vent) (car vent)))

(defun aoc05-order-points (vent)
  (if (> (start-x vent) (end-x vent))
      (aoc05-swap-points vent)
      vent))

(defun aoc05-slope (vent)
  (if (/= (start-x vent) (end-x vent))
      (/ (- (end-y vent) (start-y vent))
	 (- (end-x vent) (start-x vent)))
      nil))

(defun aoc05-intercept (slope point)
  (if slope
      (- (second point) (* slope (first point)))
      nil))

(defun aoc05-line (slope y-intercept x)
  (+ (* slope x) y-intercept))

(defun aoc0502-mark-vents (vents marked)
  (dolist (vent vents)
    (let* ((ordered-vent (aoc05-order-points vent))
	   (slope (aoc05-slope ordered-vent))
	   (y-intercept (aoc05-intercept slope (car ordered-vent))))
      (if (and y-intercept slope)
	  (loop for x from (start-x ordered-vent) to (end-x ordered-vent)
		do (incf (aref marked (aoc05-line slope y-intercept x) x)))
	  (loop for y from (min (start-y ordered-vent) (end-y ordered-vent))
		  to (max (start-y ordered-vent) (end-y ordered-vent))
		do (incf (aref marked y (start-x ordered-vent))))))))

(defun aoc05-count-marked (marked)
  (let ((sum 0))
    (dotimes (y *grid*)
      (dotimes (x *grid*)
	(when (>= (aref marked y x) 2)
	  (incf sum))))
    sum))

(defun aoc0501 ()
  (let* ((vents (aoc05-parse-input (aoc05-load-input)))
	 (marked (make-array (list *grid* *grid*) :initial-element 0)))
    (aoc0501-mark-vents vents marked)
    (aoc05-count-marked marked)))

(defun aoc0502 ()
  (let* ((vents (aoc05-parse-input (aoc05-load-input)))
	 (marked (make-array (list *grid* *grid*) :initial-element 0)))
    (aoc0502-mark-vents vents marked)
    (aoc05-count-marked marked)))
