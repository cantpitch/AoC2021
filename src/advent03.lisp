(require 'bit-smasher)

(defun aoc03-load-input ()
  (uiop:read-file-lines "../input/input03.txt"))

(defun aoc0301 ()
  (let* ((input (aoc03-load-input))
	 (gamma-array (make-array (length (first input)) :initial-element 0))
	 (total 0)
	 (gamma (make-array (length (first input)) :element-type 'bit))
	 (epsilon (make-array (length (first input)) :element-type 'bit)))
    (dolist (b input)
      (loop for i from 0 below (length b) do
	(when (equal (aref b i) #\1)
	  (incf (aref gamma-array i))))
      (incf total))
    (loop for i from 0 below (length gamma-array) do    
      (if (>= (aref gamma-array i) (/ total 2))
	  (setf (aref gamma i) 1)
	  (setf (aref gamma i) 0)))
    (setf epsilon (bit-not gamma))
    (format t "~a * ~a = ~a~%"
	    (bit-smasher:int<- gamma)
	    (bit-smasher:int<- epsilon)
	    (* (bit-smasher:int<- gamma) (bit-smasher:int<- epsilon)))))

(defun aoc0302-filter-rating-value (input op)
  (let* ((bit-count 0)
	 (bit #\0)
	 (total 0))
    (let ((filtered '()))
      (loop for i from 0 below (length (first input)) do
	(dolist (b input)
	  (when (equal (aref b i) #\1) (incf bit-count))
	  (incf total))
	(if (funcall op bit-count (/ total 2))
	    (setf bit #\1)
	    (setf bit #\0))
	(dolist (b input)
	  (when (equal (aref b i) bit) (push b filtered)))
	(when (equal (length filtered) 1) (return (first filtered)))
	(setf input filtered)
	(setf filtered '())
	(setf bit-count 0)
	(setf total 0)))))
	
(defun aoc0302 ()
  (let* ((input (aoc03-load-input))
	 (o2-string (aoc0302-filter-rating-value input #'>=))
	 (co2-string (aoc0302-filter-rating-value input #'<))
	 (o2 (parse-integer o2-string :radix 2))
	 (co2 (parse-integer co2-string :radix 2)))
    (format t "Answer: ~a~%" (* o2 co2))))
