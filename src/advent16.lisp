(ql:quickload 'bit-smasher)

(defparameter *input-file* #p"~/Projects/AoC2021/input/input16.txt")

(defun packet-version (bits) (bits->int (subseq bits 0 3)))
(defun packet-type (bits) (bits->int (subseq bits 3 6)))
(defun packet-length-type (bits) (bits->int (subseq bits 6 7)))
(defun packet-subpacket-length (bits) (values (bits->int (subseq bits 7 22))
					      (subseq bits 22)))
(defun packet-subpacket-number (bits) (values (bits->int (subseq bits 7 18))
					      (subseq bits 18)))
(defun packet-literal (bits)
  (let ((literal 0)
	(bits-read 0))
    (loop for i from 6 by 5 do
      (let ((tag (bits->int (subseq bits i (1+ i)))))
	(setf literal (+ (* literal 16)
			 (bits->int (subseq bits (1+ i) (+ i 5)))))
	(setf bits-read (+ i 5))
	(when (= tag 0) (return))))
    (values literal (subseq bits bits-read))))


(defun aoc16-load-input () (hex->bits (car (load-input *input-file*))))

(defun packet-gt (a b) (if (> a b) 1 0))
(defun packet-lt (a b) (if (< a b) 1 0))
(defun packet-eq (a b) (if (= a b) 1 0))

(defun process-packet (input packet-fn)
  (when (< (length input) 7) (return-from process-packet nil))
  (let ((version (packet-version input))
	(type (packet-type input))
	(result nil))
    (funcall packet-fn input version type)
    (if (= type 4)
	(multiple-value-bind (literal rest) (packet-literal input)
	  (setf result literal)
	  (setf input rest))
	(let ((length-type (packet-length-type input))
	      (terms nil))
	  (setf terms (list (cond ((= type 0) '+)
				  ((= type 1) '*)
				  ((= type 2) 'min)
				  ((= type 3) 'max)
				  ((= type 5) 'packet-gt)
				  ((= type 6) 'packet-lt)
				  ((= type 7) 'packet-eq))))
	  (if (= length-type 0)
	      (multiple-value-bind (bit-length rest)
		  (packet-subpacket-length input)
		(let ((subpackets (subseq rest 0 bit-length)))
		  (loop while (> (length subpackets) 0) do
		    (multiple-value-bind (subresult rest)
			(process-packet subpackets packet-fn)
		      (setf terms (cons subresult terms))
		      (setf subpackets rest)))
		  (setf result (nreverse terms)))
		(setf input (subseq rest bit-length)))
	      (multiple-value-bind (packet-count rest)
		  (packet-subpacket-number input)
		(setf input rest)
		(loop for i from 0 below packet-count do
		  (multiple-value-bind (subresult rest)
		      (process-packet input packet-fn)
		    (setf terms (cons subresult terms))
		    (setf input rest)))
		(setf result (nreverse terms))))))
    (values result input)))

(defun aoc16 (input)
  (let ((total 0))
    (multiple-value-bind (result rest)
	(process-packet input #'(lambda (input version type)
				  (declare (ignore input type))
				  (incf total version)))
      (setf input rest)
      (eval result))))
