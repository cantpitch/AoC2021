(require 'str)
(require 'alexandria)

(defun aoc08-load-input ()
  (uiop:read-file-lines #p"~/Projects/AoC2021/input/input08.txt"))

(defun aoc08-string-to-list (s)
  (loop for c across s collect c))

(defun aoc08-parse-input (input)
  (let* ((result nil))
    (dolist (line input)
      (let* ((line-b (str:split " | " line))
	     (signals (str:split " " (car line-b)))
	     (segments (str:split " " (cadr line-b))))
	(push (list signals segments) result)))
    result))

(defun aoc0802-parse-input (input)
  (let* ((result nil))
    (dolist (line input)
      (push (list (mapcar #'aoc08-string-to-list (car line))
		  (mapcar #'aoc08-string-to-list (cadr line))) result))
    result))

(defun aoc0801 ()
  (let* ((input (aoc08-parse-input (aoc08-load-input)))
	 (segments (alexandria:flatten (mapcar #'cadr input)))
	 (digits (remove-if-not #'(lambda (x) (member (length x) '(2 3 4 7)))
				segments)))
    (length digits)))

(defun aoc0802-print-signals (signal-values)
  (loop for i from 0 to 9 do
    (format t "~a: ~a~%" i (gethash i signal-values))))

(defun set-equal (a b)
  (and (subsetp a b)
       (subsetp b a)))

(defun aoc0802-get-digit (s signal-values)
  (loop for i from 0 to 9 do
    (when (set-equal s (gethash i signal-values))
      (return-from aoc0802-get-digit i))))

(defun aoc0802 ()
  (let* ((input (aoc0802-parse-input (aoc08-parse-input (aoc08-load-input))))
	 (results nil))
    (dolist (entry input)
      (let*  ((signals (car entry))
	      (outputs (cadr entry))
	      (signal-values (make-hash-table))
	      (segment-cf nil)
	      (segment-e nil))
	(setf (gethash 1 signal-values) (find-if #'(lambda (x) (= (length x) 2))
						 signals))
	(setf (gethash 7 signal-values) (find-if #'(lambda (x) (= (length x) 3))
						 signals))
	(setf (gethash 4 signal-values) (find-if #'(lambda (x) (= (length x) 4))
						 signals))
	(setf (gethash 8 signal-values) (find-if #'(lambda (x) (= (length x) 7))
						 signals))
	(setf segment-cf (intersection (gethash 7 signal-values)
				       (gethash 1 signal-values)))
	(setf (gethash 3 signal-values)
	      (find-if #'(lambda (x) (and (= (length x) 5)
					  (subsetp segment-cf x)))
		       signals))
	(setf (gethash 9 signal-values)
	      (find-if #'(lambda (x) (and (= (length x) 6)
					  (and (subsetp (gethash 3 signal-values)
							x)
					       (subsetp (gethash 4 signal-values)
							x))))
		       signals))
	(setf segment-e (car (set-difference (gethash 8 signal-values)
					     (gethash 9 signal-values))))
	(setf (gethash 2 signal-values)
	      (find-if #'(lambda (x) (and (= (length x) 5)
					  (member segment-e x)))
		       signals))
	(setf (gethash 5 signal-values)
	      (find-if #'(lambda (x) (and (= (length x) 5)
					  (not (set-equal (gethash 3 signal-values) x))
					  (not (set-equal (gethash 2 signal-values) x))))
		       signals))
	(setf (gethash 0 signal-values)
	     (find-if #'(lambda (x) (and (= (length x) 6)
					 (= (length (set-difference (gethash 5 signal-values) x)) 1)))
		      signals))
	(setf (gethash 6 signal-values)
	      (find-if #'(lambda (x) (and (= (length x) 6)
					  (not (set-equal (gethash 0 signal-values) x))
					  (not (set-equal (gethash 9 signal-values) x))))
		       signals))
	(let ((val 0))
	  (loop for o in outputs do
	    (setf val (+ (* 10 val) (aoc0802-get-digit o signal-values))))
	  (push val results))))
    (apply #'+ results)))
