(require 'str)

(defun aoc04-load-input ()
  (uiop:read-file-lines #p"~/Projects/AoC2021/input/input04.txt"))

(defun aoc04-parse-boards (input)
  (let ((boards (make-array '(1 5 5)))
	(board-index 0)
	(board-total 0)
	(board-row 0)
	(row-index 0))
    (dolist (row input)
      ;; add space to the array every 10 boards
      (when (equal (mod board-index 10) 0) (setf boards (adjust-array boards (list (+ board-index 10) 5 5))))
      ;; blank row means we need to create a new bingo board
      (when (string= "" row)
	(incf board-index)
	(incf board-total)
	(setf board-row 0))

      (when (not (string= "" row))
	(let ((cols (str:split " " row :omit-nulls t))
	      (col-index 0))
	  (dolist (item cols)
	    (setf (aref boards board-index board-row col-index) (parse-integer item))
	    (incf col-index))
	  (incf board-row)))

      (incf row-index))
    
    (incf board-total)
    (adjust-array boards (list board-total 5 5))))

(defun aoc04-mark-boards (boards draw marked)
  (dotimes (b (array-dimension boards 0))
    (dotimes (r 5)
      (dotimes (c 5)
	(when (equal (aref boards b r c) draw) (setf (aref marked b r c) t))))))

(defun aoc04-bingo-row (marked board-index board-row)
  (let ((cnt 0))
    (dotimes (c 5)
      (when (aref marked board-index board-row c) (incf cnt)))
    (equal cnt 5)))

(defun aoc04-bingo-col (marked board-index board-col)
  (let ((cnt 0))
    (dotimes (r 5)
      (when (aref marked board-index r board-col) (incf cnt)))
    (equal cnt 5)))

(defun aoc0401-check-first-winner (marked)
  (dotimes (b (array-dimension marked 0))
    (dotimes (r 5)
      (when (aoc04-bingo-row marked b r)
	(return-from aoc0401-check-first-winner b)))
    (dotimes (c 5)
      (when (aoc04-bingo-col marked b c)
	(return-from aoc0401-check-first-winner b)))
  nil))

(defun aoc0402-check-last-winner (marked won)
  (let ((last-won -1))
    (dotimes (b (array-dimension marked 0))
      (when (not (aref won b))
	(dotimes (r 5)
	  (when (aoc04-bingo-row marked b r)
	    (setf (aref won b) t)
	    (setf last-won b)))
	(dotimes (c 5)
	  (when (aoc04-bingo-col marked b c)
	    (setf (aref won b) t)
	    (setf last-won b)))))
    last-won))

(defun aoc04-score-board (boards marked board-index last-draw)
  (let ((sum 0))
    (dotimes (r 5)
      (dotimes (c 5)
	(when (not (aref marked board-index r c))
	  (incf sum (aref boards board-index r c)))))
    (* sum last-draw)))

(defun aoc0401 ()
  (let* ((input (aoc04-load-input))
	 (draws (str:split "," (first input)))
	 (boards (aoc04-parse-boards (cddr input)))
	 (marked (make-array (array-dimensions boards) :initial-element nil)))
    (dolist (draw draws)
      (let ((winner nil)
	    (d (parse-integer draw)))
	(aoc04-mark-boards boards d marked)
	(setf winner (aoc0401-check-first-winner marked))
	(when winner
	  (return-from aoc0401 (aoc04-score-board boards marked winner d)))))
    (format t "~a" marked)))

(defun aoc0402 ()
  (let* ((input (aoc04-load-input))
	 (draws (str:split "," (first input)))
	 (boards (aoc04-parse-boards (cddr input)))
	 (marked (make-array (array-dimensions boards) :initial-element nil))
	 (won (make-array (array-dimension boards 0) :initial-element nil))
	 (last-draw nil)
	 (last-won -1))
    (dolist (draw draws)
      (let ((d (parse-integer draw)))
	(setf last-draw d)
	(aoc04-mark-boards boards d marked)
	(setf last-won (aoc0402-check-last-winner marked won))
	(when (every #'(lambda (x) x) won)
	  (return-from aoc0402
	    (aoc04-score-board boards marked last-won last-draw)))))
    (format t "~a~%~a~%" last-won last-draw)))
